# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JoEFdhbC-RBlIU7SQ5WpUSzmbxTFP3tJ
"""

!pip install pandas

!pip install scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import joblib
data = pd.read_csv('/content/drive/MyDrive/Student.csv')
print(data)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import joblib

data = pd.read_csv('/content/drive/MyDrive/Student.csv')


X = data[['Maths', 'Physics', 'Chemistry']]

# Creating a new column 'Weak_Subject' to represent the weakest subject
data['Weak_Subject'] = data[['Maths', 'Physics', 'Chemistry']].idxmin(axis=1)


y = data['Weak_Subject']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train a decision tree classifier
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# Save the trained model to a file (replace 'model.pkl' with your preferred file name)
joblib.dump(clf, 'finalmodel.pkl')

import pandas as pd
import joblib  # for loading the trained model

# Load the trained model (replace 'finalmodel.pkl' with the path to your trained model file)
model = joblib.load('finalmodel.pkl')

# Load your dataset (replace 'Student.csv' with your actual data file path)
data = pd.read_csv('/content/drive/MyDrive/Student.csv')

# Function to predict the weakest subject for a given student name
def predict_weakest_subject(student_name):
    # Clean and standardize the input student name (convert to lowercase)
    student_name = student_name.lower()

    # Find the student's data by their name (case-insensitive)
    student_data = data[data['Student_Name'].str.lower() == student_name]

    if student_data.empty:
        return f"Student '{student_name}' not found in the dataset."

    # Extract features for the student (you need to select the correct subject columns)
    student_features = student_data[['Maths', 'Physics', 'Chemistry']]

    # Predict the weakest subject for the student
    weakest_subject = model.predict(student_features)

    return f"The weakest subject of '{student_name}' is '{weakest_subject[0]}'."

# Take input from the user
student_name = input("Enter any student's name: ")

# Call the function to predict the weakest subject
result = predict_weakest_subject(student_name)
print(result)